---
# Source: prometheus/templates/alertmanager/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "release-name-prometheus-alertmanager"
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: alertmanager
automountServiceAccountToken: true
---
# Source: prometheus/templates/server/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-prometheus-server
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: server
automountServiceAccountToken: true
---
# Source: prometheus/templates/alertmanager/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-prometheus-alertmanager"
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: alertmanager
data:
  alertmanager.yaml:
    |
      receivers:
        - name: default-receiver
      route:
        group_wait: 10s
        group_interval: 5m
        receiver: default-receiver
        repeat_interval: 3h
---
# Source: prometheus/templates/server/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-prometheus-server
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: server
data:
  prometheus.yaml:
    |
      global:
        external_labels:
          monitor: release-name-prometheus
      scrape_configs:
        - job_name: prometheus
          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                - harbor
          metrics_path: /metrics
          relabel_configs:
            - source_labels:
                - job
              target_label: __tmp_prometheus_job_name
            - action: keep
              source_labels:
                - __meta_kubernetes_service_label_app_kubernetes_io_component
                - __meta_kubernetes_service_labelpresent_app_kubernetes_io_component
              regex: (server);true
            - action: keep
              source_labels:
                - __meta_kubernetes_service_label_app_kubernetes_io_instance
                - __meta_kubernetes_service_labelpresent_app_kubernetes_io_instance
              regex: (release-name);true
            - action: keep
              source_labels:
                - __meta_kubernetes_service_label_app_kubernetes_io_name
                - __meta_kubernetes_service_labelpresent_app_kubernetes_io_name
              regex: (prometheus);true
            - action: keep
              source_labels:
                - __meta_kubernetes_endpoint_port_name
              regex: http
            - source_labels:
                - __meta_kubernetes_endpoint_address_target_kind
                - __meta_kubernetes_endpoint_address_target_name
              separator: ;
              regex: Node;(.*)
              replacement: ${1}
              target_label: node
            - source_labels:
                - __meta_kubernetes_endpoint_address_target_kind
                - __meta_kubernetes_endpoint_address_target_name
              separator: ;
              regex: Pod;(.*)
              replacement: ${1}
              target_label: pod
            - source_labels:
                - __meta_kubernetes_namespace
              target_label: namespace
            - source_labels:
                - __meta_kubernetes_service_name
              target_label: service
            - source_labels:
                - __meta_kubernetes_pod_name
              target_label: pod
            - source_labels:
                - __meta_kubernetes_pod_container_name
              target_label: container
            - action: drop
              source_labels:
                - __meta_kubernetes_pod_phase
              regex: (Failed|Succeeded)
            - source_labels:
                - __meta_kubernetes_service_name
              target_label: job
              replacement: ${1}
            - target_label: endpoint
              replacement: http
            - source_labels:
                - __address__
              target_label: __tmp_hash
              modulus: 1
              action: hashmod
            - source_labels:
                - __tmp_hash
              regex: 0
              action: keep
        - job_name: alertmanager
          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                - harbor
          metrics_path: /metrics
          relabel_configs:
            - source_labels:
                - job
              target_label: __tmp_prometheus_job_name
            - action: keep
              source_labels:
                - __meta_kubernetes_service_label_app_kubernetes_io_component
                - __meta_kubernetes_service_labelpresent_app_kubernetes_io_component
              regex: (alertmanager);true
            - action: keep
              source_labels:
                - __meta_kubernetes_service_label_app_kubernetes_io_instance
                - __meta_kubernetes_service_labelpresent_app_kubernetes_io_instance
              regex: (release-name);true
            - action: keep
              source_labels:
                - __meta_kubernetes_service_label_app_kubernetes_io_name
                - __meta_kubernetes_service_labelpresent_app_kubernetes_io_name
              regex: (prometheus);true
            - action: keep
              source_labels:
                - __meta_kubernetes_endpoint_port_name
              regex: http
            - source_labels:
                - __meta_kubernetes_endpoint_address_target_kind
                - __meta_kubernetes_endpoint_address_target_name
              separator: ;
              regex: Node;(.*)
              replacement: ${1}
              target_label: node
            - source_labels:
                - __meta_kubernetes_endpoint_address_target_kind
                - __meta_kubernetes_endpoint_address_target_name
              separator: ;
              regex: Pod;(.*)
              replacement: ${1}
              target_label: pod
            - source_labels:
                - __meta_kubernetes_namespace
              target_label: namespace
            - source_labels:
                - __meta_kubernetes_service_name
              target_label: service
            - source_labels:
                - __meta_kubernetes_pod_name
              target_label: pod
            - source_labels:
                - __meta_kubernetes_pod_container_name
              target_label: container
            - action: drop
              source_labels:
                - __meta_kubernetes_pod_phase
              regex: (Failed|Succeeded)
            - source_labels:
                - __meta_kubernetes_service_name
              target_label: job
              replacement: ${1}
            - target_label: endpoint
              replacement: http
            - source_labels:
                - __address__
              target_label: __tmp_hash
              modulus: 1
              action: hashmod
            - source_labels:
                - __tmp_hash
              regex: 0
              action: keep
      alerting:
        alertmanagers:
          - scheme: HTTP
            static_configs:
              - targets: [ "release-name-prometheus-alertmanager.harbor.svc.cluster.local:80" ]
      rule_files:
        - rules.yaml
  rules.yaml:
    '{}'
---
# Source: prometheus/templates/server/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-prometheus-harbor-server
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: server
rules:
  # These rules come from <https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/templates/clusterrole.yaml>
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: prometheus/templates/server/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-prometheus-harbor-server
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-prometheus-harbor-server
subjects:
  - kind: ServiceAccount
    name: release-name-prometheus-server
    namespace: "harbor"
---
# Source: prometheus/templates/alertmanager/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-prometheus-alertmanager"
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: alertmanager
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: alertmanager
---
# Source: prometheus/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-prometheus-server
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: server
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: server
---
# Source: prometheus/templates/server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-prometheus-server
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/component: server
  template:
    metadata:
      annotations:
        checksum/configmap: 0efa07fa38cd98f8160b022a5c32c6f16c6d743b7b6587b978e7315a61b0a216
      labels:
        app.kubernetes.io/name: prometheus
        helm.sh/chart: prometheus-0.1.7
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: prometheus
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: release-name-prometheus-server
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: prometheus
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: server
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: prometheus
          image: docker.io/bitnami/prometheus:2.45.0-debian-11-r5
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - "--config.file=/opt/bitnami/prometheus/conf/prometheus.yaml"
            - "--storage.tsdb.path=/bitnami/prometheus/data"
            - "--storage.tsdb.retention.time=10d"
            - "--storage.tsdb.retention.size=0"
            - "--log.level=info"
            - "--log.format=logfmt"
            - "--web.listen-address=:9090"
            - "--web.console.libraries=/opt/bitnami/prometheus/conf/console_libraries"
            - "--web.console.templates=/opt/bitnami/prometheus/conf/consoles"
            - "--web.route-prefix=/"
          env:
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 9090
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /-/healthy
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
            httpGet:
              path: /-/ready
              port: http
          volumeMounts:
            - name: config
              mountPath: /opt/bitnami/prometheus/conf
              readOnly: true
            - name: data
              mountPath: /bitnami/prometheus/data
      volumes:
        - name: config
          configMap:
            name: release-name-prometheus-server
        - name: data
          emptyDir: {}
---
# Source: prometheus/templates/alertmanager/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "release-name-prometheus-alertmanager"
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: prometheus
    helm.sh/chart: prometheus-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/component: alertmanager
spec:
  replicas: 1
  podManagementPolicy: "OrderedReady"
  selector:
    matchLabels: 
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/component: alertmanager
  serviceName: release-name-prometheus-alertmanager-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        helm.sh/chart: prometheus-0.1.7
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: prometheus
        app.kubernetes.io/component: alertmanager
    spec:
      serviceAccountName: release-name-prometheus-alertmanager
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: prometheus
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: alertmanager
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: alertmanager
          image: docker.io/bitnami/alertmanager:0.25.0-debian-11-r68
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - "--config.file=/opt/bitnami/alertmanager/conf/alertmanager.yaml"
            - "--storage.path=/opt/bitnami/alertmanager/data"
            - "--web.listen-address=0.0.0.0:9093"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 9093
            - name: tcp-cluster
              containerPort: 9094
              protocol: TCP
            - name: udp-cluster
              containerPort: 9094
              protocol: UDP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /-/healthy
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
            httpGet:
              path: /-/ready
              port: http
          volumeMounts:
            - name: config
              mountPath: /opt/bitnami/alertmanager/conf
              readOnly: true
            - name: data
              mountPath: /bitnami/alertmanager/data
      volumes:
        - name: config
          configMap:
            name: release-name-prometheus-alertmanager
        - name: data
          emptyDir: {}
