---
# Source: sonarqube/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-sonarqube
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: sonarqube
    helm.sh/chart: sonarqube-3.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
---
# Source: sonarqube/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "Q2ZLeGg4UjdMVQ=="
  password: "RjZYVDh6UTJUUw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: sonarqube/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-sonarqube
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: sonarqube
    helm.sh/chart: sonarqube-3.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  sonarqube-password: "WXh1Zkl0Q0l0Mw=="
---
# Source: sonarqube/templates/install_plugins.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-install-plugins-configmap
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: sonarqube
    helm.sh/chart: sonarqube-3.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  install_plugins.sh: |-
---
# Source: sonarqube/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: sonarqube/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: sonarqube/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sonarqube
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: sonarqube
    helm.sh/chart: sonarqube-3.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  externalTrafficPolicy: "Cluster"
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: elastic
      port: 9001
      protocol: TCP
      targetPort: elastic
  selector:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/instance: release-name
---
# Source: sonarqube/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sonarqube
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: sonarqube
    helm.sh/chart: sonarqube-3.2.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarqube
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/secret: e826248ba1baa2c5f1bc27eefa64c96759dfc70426d2c6b74efcec64ca8996ff
      labels:
        app.kubernetes.io/name: sonarqube
        helm.sh/chart: sonarqube-3.2.7
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: release-name-sonarqube
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: sonarqube
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:11-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT="$(sysctl -n vm.max_map_count)"
              DESIRED="262144"
              if [[ "$DESIRED" -gt "$CURRENT" ]]; then
                  sysctl -w vm.max_map_count=262144
              fi
              CURRENT="$(sysctl -n fs.file-max)"
              DESIRED="65536"
              if [[ "$DESIRED" -gt "$CURRENT" ]]; then
                  sysctl -w fs.file-max=65536
              fi
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: sonarqube
          image: docker.io/bitnami/sonarqube:10.1.0-debian-11-r6
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: SONARQUBE_SKIP_BOOTSTRAP
              value: "no"
            - name: SONARQUBE_USERNAME
              value: "user"
            - name: SONARQUBE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-sonarqube
                  key: sonarqube-password
            - name: SONARQUBE_EMAIL
              value: "user@example.com"
            - name: SONARQUBE_MIN_HEAP_SIZE
              value: "1024m"
            - name: SONARQUBE_MAX_HEAP_SIZE
              value: "2048m"
            - name: LDAP_AUTHENTICATION
              value: "simple"
            - name: LDAP_CONTEXTFACTORYCLASS
              value: "com.sun.jndi.ldap.LdapCtxFactory"
            - name: LDAP_FOLLOWREFERRALS
              value: "true"
            - name: LDAP_USER_REQUEST
              value: "(&(objectClass=inetOrgPerson)(uid={login}))"
            - name: LDAP_USER_REALNAMEATTRIBUTE
              value: "cn"
            - name: LDAP_USER_EMAILATTRIBUTE
              value: "mail"
            - name: LDAP_GROUP_REQUEST
              value: "(&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))"
            - name: LDAP_GROUP_IDATTRIBUTE
              value: "cn"
            - name: SONARQUBE_START_TIMEOUT
              value: "150"
            - name: SONARQUBE_DATABASE_HOST
              value: "release-name-postgresql"
            - name: SONARQUBE_DATABASE_PORT_NUMBER
              value: "5432"
            - name: SONARQUBE_DATABASE_NAME
              value: "bitnami_sonarqube"
            - name: SONARQUBE_DATABASE_USER
              value: "bn_sonarqube"
            - name: SONARQUBE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: SONARQUBE_PORT_NUMBER
              value: "9000"
            - name: SONARQUBE_ELASTICSEARCH_PORT_NUMBER
              value: "9001"
            - name: SONARQUBE_WEB_JAVA_ADD_OPTS
              value: 
            - name: SONAR_CE_JAVAADDITIONALOPTS
              value: 
          envFrom:
          resources:
            limits: {}
            requests:
              cpu: 100m
              memory: 2048Mi
          ports:
            - name: http
              containerPort: 9000
            - name: elastic
              containerPort: 9001
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 100
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 100
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          volumeMounts:
            - mountPath: /bitnami/sonarqube
              name: sonarqube
      volumes:
        - name: sonarqube
          emptyDir: {}
---
# Source: sonarqube/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.6.5
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.3.0-debian-11-r17
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_sonarqube"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "bitnami_sonarqube"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_sonarqube" -d "dbname=bitnami_sonarqube" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_sonarqube" -d "dbname=bitnami_sonarqube" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
