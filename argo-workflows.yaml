---
# Source: argo-workflows/templates/controller/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-argo-workflows-controller
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: argo-workflows
  annotations:
automountServiceAccountToken: true
---
# Source: argo-workflows/templates/server/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-argo-workflows-server
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: argo-workflows
automountServiceAccountToken: true
---
# Source: argo-workflows/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "aTdWZkdpRG4yMw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: argo-workflows/templates/controller/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-argo-workflows-controller-database
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: argo-workflows
type: Opaque
data:
  username: cG9zdGdyZXM=
---
# Source: argo-workflows/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-argo-workflows-controller
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: controller
data:
  config: |
    
    ## How many workflows can be running at the same time
    ##
    parallelism:
    ## Maximun number of workflows running in a namespace
    ##
    namespaceParallelism:
    executor:
      resources:
        limits: {}
        requests: {}
    ## Uncomment to enable Artofact repository with the provided configuration
    ## artifactRepository:
    ##  archiveLogs: false
    ##  configuration: {}
    ##
    persistence:
      connectionPool:
        maxIdleConns: 100
        maxOpenConns: 0
      nodeStatusOffLoad: false
      archive: false
      postgresql:
        host: release-name-postgresql
        port: 5432
        database: bn_argo_workflows
        tableName: argo_workflows
        ## the database secrets must be in the same namespace of the controller
        ##
        userNameSecret:
          name: release-name-argo-workflows-controller-database
          key: username
        passwordSecret:
          name: release-name-postgresql
          key: postgres-password
    ## Uncomment to set workflowRestrictions
    ## Ref: https://argoproj.github.io/argo-workflows/workflow-restrictions/
    ## workflowRestrictions: {}
    ## Uncomment to set links
    ## Ref: https://argoproj.github.io/argo-workflows/links/
    ## links: {}
    ##
---
# Source: argo-workflows/templates/controller/aggregate-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-argo-workflows-harbor-view
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: controller
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
      - workflows/finalizers
      - workfloweventbindings
      - workfloweventbindings/finalizers
      - workflowtemplates
      - workflowtemplates/finalizers
      - cronworkflows
      - cronworkflows/finalizers
      - clusterworkflowtemplates
      - clusterworkflowtemplates/finalizers
    verbs:
      - get
      - list
      - watch
---
# Source: argo-workflows/templates/controller/aggregate-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-argo-workflows-harbor-edit
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: controller
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
      - workflows/finalizers
      - workfloweventbindings
      - workfloweventbindings/finalizers
      - workflowtemplates
      - workflowtemplates/finalizers
      - cronworkflows
      - cronworkflows/finalizers
      - clusterworkflowtemplates
      - clusterworkflowtemplates/finalizers
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
---
# Source: argo-workflows/templates/controller/aggregate-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-argo-workflows-harbor-admin
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: controller
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
      - workflows/finalizers
      - workfloweventbindings
      - workfloweventbindings/finalizers
      - workflowtemplates
      - workflowtemplates/finalizers
      - cronworkflows
      - cronworkflows/finalizers
      - clusterworkflowtemplates
      - clusterworkflowtemplates/finalizers
      - workflowtasksets
      - workflowtasksets/finalizers
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
---
# Source: argo-workflows/templates/controller/controller-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-argo-workflows-harbor-controller
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: controller
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
      - persistentvolumeclaims/finalizers
    verbs:
      - create
      - update
      - delete
      - get
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
      - workflows/finalizers
      - workflowtasksets
      - workflowtasksets/finalizers
      - workflowartifactgctasks
    verbs:
      - get
      - list
      - watch
      - update
      - patch
      - delete
      - create
  - apiGroups:
      - argoproj.io
    resources:
      - workflowtemplates
      - workflowtemplates/finalizers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - argoproj.io
    resources:
      - cronworkflows
      - cronworkflows/finalizers
    verbs:
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - argoproj.io
    resources:
      - workflowtaskresults
    verbs:
      - list
      - watch
      - deletecollection
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - list
  - apiGroups:
      - "policy"
    resources:
      - poddisruptionbudgets
    verbs:
      - create
      - get
      - delete
  - apiGroups:
      - ""
    resources:
      - secrets
    resourceNames:
      - release-name-argo-workflows-controller-database
      - release-name-postgresql
      
      - argo-workflows-agent-ca-certificates
    verbs:
      - get
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    resourceNames:
      - workflow-controller
      - workflow-controller-lease
    verbs:
      - get
      - watch
      - update
      - patch
      - delete
---
# Source: argo-workflows/templates/controller/controller-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-argo-workflows-harbor-controller-cluster-template
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: controller
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - clusterworkflowtemplates
      - clusterworkflowtemplates/finalizers
    verbs:
      - get
      - list
      - watch
---
# Source: argo-workflows/templates/server/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-argo-workflows-harbor-server
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: server
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - events
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
      - pods/log
    verbs:
      - get
      - list
      - watch
      - delete
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - watch
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - secrets
    resourceNames:
      - release-name-argo-workflows-controller-database
      - release-name-postgresql
    verbs:
      - get
  - apiGroups:
      - argoproj.io
    resources:
      - eventsources
      - sensors
      - workflows
      - workfloweventbindings
      - workflowtemplates
      - cronworkflows
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - dataflow.argoproj.io
    resources:
      - pipelines
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
---
# Source: argo-workflows/templates/server/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-argo-workflows-harbor-server-cluster-template
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: server
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - clusterworkflowtemplates
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
# Source: argo-workflows/templates/controller/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-argo-workflows-harbor-controller
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-argo-workflows-harbor-controller
subjects:
  - kind: ServiceAccount
    name: release-name-argo-workflows-controller
    namespace: harbor
  - kind: ServiceAccount
    name: release-name-argo-workflows-controller
    namespace: default
---
# Source: argo-workflows/templates/controller/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-argo-workflows-harbor-controller-cluster-template
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-argo-workflows-harbor-controller-cluster-template
subjects:
  - kind: ServiceAccount
    name: release-name-argo-workflows-controller
    namespace: harbor
---
# Source: argo-workflows/templates/server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-argo-workflows-harbor-server
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-argo-workflows-harbor-server
subjects:
  - kind: ServiceAccount
    name: release-name-argo-workflows-server
    namespace: "harbor"
---
# Source: argo-workflows/templates/server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-argo-workflows-harbor-server-cluster-template
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-argo-workflows-harbor-server-cluster-template
subjects:
  - kind: ServiceAccount
    name: release-name-argo-workflows-server
    namespace: "harbor"
---
# Source: argo-workflows/templates/controller/workflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-argo-workflows-workflow
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: argo-workflows
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - configmaps
    verbs:
      - list
      - get
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
---
# Source: argo-workflows/templates/controller/workflow-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-argo-workflows-workflow
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-argo-workflows-workflow
subjects:
  - kind: ServiceAccount
    name: default
    namespace: harbor
---
# Source: argo-workflows/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: argo-workflows/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: argo-workflows/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-argo-workflows-server
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: server
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: web
      nodePort: null
  selector:
    app.kubernetes.io/name: argo-workflows
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: server
---
# Source: argo-workflows/templates/controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-argo-workflows-controller
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: argo-workflows
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: controller
  template:
    metadata:
      annotations:
        checksum/config: 1ede154a23f1bc452e0f1a641c1e51fc064a717d1451ac383c8b52f4cd378462
      labels:
        app.kubernetes.io/name: argo-workflows
        helm.sh/chart: argo-workflows-5.3.8
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: release-name-argo-workflows-controller
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argo-workflows
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: controller
          image: docker.io/bitnami/argo-workflow-controller:3.4.8-scratch-r2
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - --configmap
            - release-name-argo-workflows-controller
            - --executor-image
            - docker.io/bitnami/argo-workflow-exec:3.4.8-debian-11-r51
            - --executor-image-pull-policy
            - IfNotPresent
            - --loglevel
            - info
            - --gloglevel
            - "0"
            - --workflow-workers
            - "32"
          env:
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: LEADER_ELECTION_IDENTITY
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          envFrom:
          ports:
            - name: metrics
              containerPort: 9090
            - name: controller
              # The controller port is hardcoded in the source code.
              # Ref: https://github.com/argoproj/argo-workflows/blob/b35aabe86be9fa5db80299cebcfb29c32be21047/cmd/workflow-controller/main.go#L116
              containerPort: 6060
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            httpGet:
              port: 6060
              path: /healthz
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 6060
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
      volumes:
---
# Source: argo-workflows/templates/server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-argo-workflows-server
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: argo-workflows
    helm.sh/chart: argo-workflows-5.3.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/component: server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: server
  template:
    metadata:
      annotations:
        checksum/config: 1ede154a23f1bc452e0f1a641c1e51fc064a717d1451ac383c8b52f4cd378462
      labels:
        app.kubernetes.io/name: argo-workflows
        helm.sh/chart: argo-workflows-5.3.8
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: release-name-argo-workflows-server
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argo-workflows
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: server
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: argo-server
          image: docker.io/bitnami/argo-workflow-cli:3.4.8-scratch-r3
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - server
            - --configmap=release-name-argo-workflows-controller
            - --secure=false
            - --auth-mode
            - client
            - --port
            - "2746"
          ports:
            - name: web
              containerPort: 2746
          env:
            - name: IN_CLUSTER
              value: "true"
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BASE_HREF
              value: "/"
          envFrom:
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            httpGet:
              path: /
              port: 2746
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 2746
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: argo-workflows/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.6.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.3.0-debian-11-r24
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "bn_argo_workflows"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=bn_argo_workflows" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=bn_argo_workflows" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
