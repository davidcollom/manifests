---
# Source: clickhouse/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-clickhouse
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
automountServiceAccountToken: true
---
# Source: clickhouse/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-clickhouse
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
type: Opaque
data:
  admin-password: "UlI2Y0hJUE1HYQ=="
---
# Source: clickhouse/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-zookeeper-scripts
  namespace: harbor
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.4.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOSTNAME"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: clickhouse/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-clickhouse
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
data:
  00_default_overrides.xml: |
    <clickhouse>
      <!-- Macros -->
      <macros>
        <shard from_env="CLICKHOUSE_SHARD_ID"></shard>
        <replica from_env="CLICKHOUSE_REPLICA_ID"></replica>
        <layer>release-name-clickhouse</layer>
      </macros>
      <!-- Log Level -->
      <logger>
        <level>information</level>
      </logger>
      <!-- Cluster configuration - Any update of the shards and replicas requires helm upgrade -->
      <remote_servers>
        <default>
          <shard>
              <replica>
                  <host>release-name-clickhouse-shard0-0.release-name-clickhouse-headless.harbor.svc.cluster.local</host>
                  <port>9000</port>
              </replica>
              <replica>
                  <host>release-name-clickhouse-shard0-1.release-name-clickhouse-headless.harbor.svc.cluster.local</host>
                  <port>9000</port>
              </replica>
              <replica>
                  <host>release-name-clickhouse-shard0-2.release-name-clickhouse-headless.harbor.svc.cluster.local</host>
                  <port>9000</port>
              </replica>
          </shard>
          <shard>
              <replica>
                  <host>release-name-clickhouse-shard1-0.release-name-clickhouse-headless.harbor.svc.cluster.local</host>
                  <port>9000</port>
              </replica>
              <replica>
                  <host>release-name-clickhouse-shard1-1.release-name-clickhouse-headless.harbor.svc.cluster.local</host>
                  <port>9000</port>
              </replica>
              <replica>
                  <host>release-name-clickhouse-shard1-2.release-name-clickhouse-headless.harbor.svc.cluster.local</host>
                  <port>9000</port>
              </replica>
          </shard>
        </default>
      </remote_servers>
      <!-- Zookeeper configuration -->
      <zookeeper>
        
        <node>
          <host from_env="KEEPER_NODE_0"></host>
          <port>2181</port>
        </node>
        <node>
          <host from_env="KEEPER_NODE_1"></host>
          <port>2181</port>
        </node>
        <node>
          <host from_env="KEEPER_NODE_2"></host>
          <port>2181</port>
        </node>
      </zookeeper>
    </clickhouse>
---
# Source: clickhouse/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-clickhouse-scripts
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
data:
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining KEEPER_SERVER_ID
    # check KEEPER_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/clickhouse/keeper/data/myid" ]]; then
        export KEEPER_SERVER_ID="$(cat /bitnami/clickhouse/keeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            export KEEPER_SERVER_ID=${BASH_REMATCH[2]}
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /opt/bitnami/scripts/clickhouse/entrypoint.sh /opt/bitnami/scripts/clickhouse/run.sh -- --listen_host=0.0.0.0
---
# Source: clickhouse/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper-headless
  namespace: harbor
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.4.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: zookeeper
---
# Source: clickhouse/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper
  namespace: harbor
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.4.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: zookeeper
---
# Source: clickhouse/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-clickhouse-headless
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      targetPort: http
      port: 8123
      protocol: TCP
    - name: tcp
      targetPort: tcp
      port: 9000
      protocol: TCP
    - name: tcp-mysql
      targetPort: tcp-mysql
      port: 9004
      protocol: TCP
    - name: tcp-postgresql
      targetPort: tcp-postgresql
      port: 9005
      protocol: TCP
    - name: http-intersrv
      targetPort: http-intersrv
      port: 9009
      protocol: TCP
  selector:
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: clickhouse
---
# Source: clickhouse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-clickhouse
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      targetPort: http
      port: 8123
      protocol: TCP
      nodePort: null
    - name: tcp
      targetPort: tcp
      port: 9000
      protocol: TCP
      nodePort: null
    - name: tcp-mysql
      targetPort: tcp-mysql
      port: 9004
      protocol: TCP
      nodePort: null
    - name: tcp-postgresql
      targetPort: tcp-postgresql
      port: 9005
      protocol: TCP
      nodePort: null
    - name: http-intersrv
      targetPort: http-intersrv
      port: 9009
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: clickhouse
---
# Source: clickhouse/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-zookeeper
  namespace: harbor
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.4.3
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: zookeeper
  serviceName: release-name-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-11.4.3
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: zookeeper
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.1-debian-11-r46
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: release-name-zookeeper-0.release-name-zookeeper-headless.harbor.svc.cluster.local:2888:3888::1 release-name-zookeeper-1.release-name-zookeeper-headless.harbor.svc.cluster.local:2888:3888::2 release-name-zookeeper-2.release-name-zookeeper-headless.harbor.svc.cluster.local:2888:3888::3 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: release-name-zookeeper-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: clickhouse/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-clickhouse-shard0
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
spec:
  replicas: 3
  podManagementPolicy: "Parallel"
  selector:
    matchLabels: 
      app.kubernetes.io/name: clickhouse
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: clickhouse
  serviceName: release-name-clickhouse-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 596545fc57e0bed1fd591743b55d5616d32f8d7968e14ce28845c2c566e5a705
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/config-users-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/name: clickhouse
        helm.sh/chart: clickhouse-3.5.5
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: clickhouse
    spec:
      serviceAccountName: release-name-clickhouse
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: clickhouse
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: clickhouse
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      containers:
        - name: clickhouse
          image: docker.io/bitnami/clickhouse:23.6.2-debian-11-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CLICKHOUSE_HTTP_PORT
              value: "8123"
            - name: CLICKHOUSE_TCP_PORT
              value: "9000"
            - name: CLICKHOUSE_MYSQL_PORT
              value: "9004"
            - name: CLICKHOUSE_POSTGRESQL_PORT
              value: "9005"
            - name: CLICKHOUSE_INTERSERVER_HTTP_PORT
              value: "9009"
            - name: CLICKHOUSE_ADMIN_USER
              value: "default"
            - name: CLICKHOUSE_SHARD_ID
              value: "shard0"
            - name: CLICKHOUSE_REPLICA_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLICKHOUSE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-clickhouse
                  key: admin-password
            - name: KEEPER_NODE_0
              value: release-name-zookeeper-0.release-name-zookeeper-headless.harbor.svc.cluster.local
            - name: KEEPER_NODE_1
              value: release-name-zookeeper-1.release-name-zookeeper-headless.harbor.svc.cluster.local
            - name: KEEPER_NODE_2
              value: release-name-zookeeper-2.release-name-zookeeper-headless.harbor.svc.cluster.local
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8123
            - name: tcp
              containerPort: 9000
            - name: tcp-postgresql
              containerPort: 9005
            - name: tcp-mysql
              containerPort: 9004
            - name: http-intersrv
              containerPort: 9009
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ping
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ping
              port: http
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/clickhouse
            - name: config
              mountPath: /bitnami/clickhouse/etc/conf.d/default
      volumes:
        - name: scripts
          configMap:
            name: release-name-clickhouse-scripts
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-clickhouse
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        labels:
          app.kubernetes.io/name: clickhouse
          helm.sh/chart: clickhouse-3.5.5
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/component: clickhouse
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: clickhouse/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-clickhouse-shard1
  namespace: "harbor"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-3.5.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
spec:
  replicas: 3
  podManagementPolicy: "Parallel"
  selector:
    matchLabels: 
      app.kubernetes.io/name: clickhouse
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: clickhouse
  serviceName: release-name-clickhouse-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 596545fc57e0bed1fd591743b55d5616d32f8d7968e14ce28845c2c566e5a705
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/config-users-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/name: clickhouse
        helm.sh/chart: clickhouse-3.5.5
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: clickhouse
    spec:
      serviceAccountName: release-name-clickhouse
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: clickhouse
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: clickhouse
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      containers:
        - name: clickhouse
          image: docker.io/bitnami/clickhouse:23.6.2-debian-11-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CLICKHOUSE_HTTP_PORT
              value: "8123"
            - name: CLICKHOUSE_TCP_PORT
              value: "9000"
            - name: CLICKHOUSE_MYSQL_PORT
              value: "9004"
            - name: CLICKHOUSE_POSTGRESQL_PORT
              value: "9005"
            - name: CLICKHOUSE_INTERSERVER_HTTP_PORT
              value: "9009"
            - name: CLICKHOUSE_ADMIN_USER
              value: "default"
            - name: CLICKHOUSE_SHARD_ID
              value: "shard1"
            - name: CLICKHOUSE_REPLICA_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLICKHOUSE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-clickhouse
                  key: admin-password
            - name: KEEPER_NODE_0
              value: release-name-zookeeper-0.release-name-zookeeper-headless.harbor.svc.cluster.local
            - name: KEEPER_NODE_1
              value: release-name-zookeeper-1.release-name-zookeeper-headless.harbor.svc.cluster.local
            - name: KEEPER_NODE_2
              value: release-name-zookeeper-2.release-name-zookeeper-headless.harbor.svc.cluster.local
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8123
            - name: tcp
              containerPort: 9000
            - name: tcp-postgresql
              containerPort: 9005
            - name: tcp-mysql
              containerPort: 9004
            - name: http-intersrv
              containerPort: 9009
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ping
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ping
              port: http
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/clickhouse
            - name: config
              mountPath: /bitnami/clickhouse/etc/conf.d/default
      volumes:
        - name: scripts
          configMap:
            name: release-name-clickhouse-scripts
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-clickhouse
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        labels:
          app.kubernetes.io/name: clickhouse
          helm.sh/chart: clickhouse-3.5.5
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/component: clickhouse
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
